WEBVTT

1
00:00:01.150 --> 00:00:07.210
Hello and welcome back to our continuing
episodes of worked exercises

2
00:00:07.210 --> 00:00:11.500
for the book Python for Informatics
Exploring Information.

3
00:00:11.500 --> 00:00:14.310
I'm your author and tour guide
Dr. Charles Severance.

4
00:00:15.530 --> 00:00:20.090
As always, these materials are copyright
Creative Commons Attribution.

5
00:00:20.090 --> 00:00:23.560
I look forward to ways that you can improve
on this work.

6
00:00:23.560 --> 00:00:24.970
This material is a supplement to

7
00:00:24.970 --> 00:00:29.900
my www.pythonlearn.com which is my
supporting website.

8
00:00:29.900 --> 00:00:32.250
For python learn, Python for Informatics.

9
00:00:33.410 --> 00:00:37.890
It has installation and other kinds of
support that can help you get started.

10
00:00:37.890 --> 00:00:42.380
So for this particular exercise, it really
comes from our dictionaries example.

11
00:00:42.380 --> 00:00:47.800
And we're going to try to figure out the
most common word.

12
00:00:47.800 --> 00:00:53.170
And in this one we're going to deal with
some really simple text files where the

13
00:00:53.170 --> 00:00:54.920
words are just words, and we're not
going to worry about

14
00:00:54.920 --> 00:00:57.390
lines or skipping lines, or anything.

15
00:00:57.390 --> 00:01:03.100
So we're just going to do words and, and
so, we'll do this thing.

16
00:01:03.100 --> 00:01:04.460
So, if we look at this program,

17
00:01:06.490 --> 00:01:09.080
there's really four basic
parts to the program.

18
00:01:10.190 --> 00:01:13.710
One is, the first part is actually
reading the program and

19
00:01:13.710 --> 00:01:17.180
this is a little different pattern than
other things that we've done.

20
00:01:18.420 --> 00:01:20.820
And that's be, we're going to read the
whole file.

21
00:01:20.820 --> 00:01:23.290
So this is, instead of doing a for loop

22
00:01:23.290 --> 00:01:26.580
here, we are going to read the entire
file.

23
00:01:26.580 --> 00:01:30.290
So, we're going to ask the user for the
file name.

24
00:01:30.290 --> 00:01:32.410
And then open the file name that they type
in.

25
00:01:32.410 --> 00:01:35.400
So, you know, here's the, we're asking the
user for a file name.

26
00:01:35.400 --> 00:01:37.840
Open the file, but then we're going to do
a handle.read.

27
00:01:37.840 --> 00:01:40.720
Now, if you recall, handle.read,
normally we would write a for loop

28
00:01:40.720 --> 00:01:45.020
that would loop through each line and
strip, and split and, and whatever.

29
00:01:45.020 --> 00:01:47.460
What we're going to do here is say, you
know, read this whole thing.

30
00:01:47.460 --> 00:01:49.220
We know that these files are pretty small.

31
00:01:49.220 --> 00:01:52.530
Read the whole thing in into a string.

32
00:01:52.530 --> 00:01:55.770
Now, the key thing is that will read all
the lines in, and the

33
00:01:55.770 --> 00:02:00.400
newlines at the end of the, at the line,
there's a newline.

34
00:02:00.400 --> 00:02:02.740
But all this will be read in.

35
00:02:02.740 --> 00:02:04.059
All the lines and the newlines.

36
00:02:05.550 --> 00:02:07.530
And the nice thing about this is the
newlines form white space, 

37
00:02:07.530 --> 00:02:09.790
and so they will give a word

38
00:02:09.790 --> 00:02:13.480
break before the let, between the last
word on one line

39
00:02:13.480 --> 00:02:15.070
and the first word on the next line.

40
00:02:15.070 --> 00:02:18.620
I'll talk about that a bit more when we're
actually looking at some stuff.

41
00:02:18.620 --> 00:02:20.940
We're going to split it into words, which
means we're going to make

42
00:02:20.940 --> 00:02:25.150
a very long list, which is all the words
in the entire file.

43
00:02:25.150 --> 00:02:26.800
Not just the words on a line, which

44
00:02:26.800 --> 00:02:28.530
is some of the other examples that we've
used.

45
00:02:30.530 --> 00:02:32.980
But again, we know these files that we're
playing with are

46
00:02:32.980 --> 00:02:36.130
relatively small, and they fit in the
memory of Python, and so

47
00:02:36.130 --> 00:02:39.420
we're just going to do simple, crude, you
know, read the whole thing

48
00:02:39.420 --> 00:02:42.790
in as a string, split it on white space,
newlines included.

49
00:02:42.790 --> 00:02:47.460
And now we're going to write a very simple
dictionary loop.

50
00:02:47.460 --> 00:02:50.330
That, we're going to create a dictionary,
and we're going to go through the word.

51
00:02:50.330 --> 00:02:53.680
Now, this, this word is our iteration
variable, of course.

52
00:02:53.680 --> 00:02:57.690
And words is all the words in all the
lines of the text.

53
00:02:57.690 --> 00:02:59.090
We're going to use the get pattern.

54
00:02:59.090 --> 00:03:04.230
So if the word exists, whatever word we're
looking at,

55
00:03:04.230 --> 00:03:06.020
we will get it and add one to it.

56
00:03:06.020 --> 00:03:08.470
And if it doesn't, we'll just use the
default value and add one.

57
00:03:08.470 --> 00:03:12.669
So this is effectively the same as setting
it to 1 the first time we see a word.

58
00:03:14.150 --> 00:03:17.020
Then we're going to write a simple
maximum list.

59
00:03:17.480 --> 00:03:21.470
And so what we're going to do we're going
to create a bigword variable that we're

60
00:03:21.470 --> 00:03:23.260
going to start as None, which is the word

61
00:03:23.260 --> 00:03:25.150
that is the largest and how many there are.

62
00:03:26.290 --> 00:03:27.740
And then we're going to do a loop

63
00:03:27.740 --> 00:03:29.880
with two iteration variables. We're
going to go through

64
00:03:29.880 --> 00:03:33.910
our, you know, our dictionary will be
word, comma, count,

65
00:03:33.910 --> 00:03:36.000
you know the word will map to the count.

66
00:03:36.000 --> 00:03:38.290
The word will be the key, count will be the
value.

67
00:03:38.290 --> 00:03:41.180
So we use counts.items to get that list of
tuples back.

68
00:03:43.330 --> 00:03:48.020
And basically if we're on the first one,
bigcount being None, or if the count is

69
00:03:48.020 --> 00:03:49.910
greater than bigcount, then we're going

70
00:03:49.910 --> 00:03:52.910
going to remember the word and we're
going to remember the count.

71
00:03:52.910 --> 00:03:55.130
And then this loop will go through all
the words.

72
00:03:55.130 --> 00:03:57.110
And at the end, we just print out
bigword and bigcount.

73
00:03:57.110 --> 00:03:59.870
So that basically is the

74
00:04:03.100 --> 00:04:04.650
the outline of what we're going to do.

75
00:04:04.650 --> 00:04:06.140
And when we'll run it, we'll run it

76
00:04:06.140 --> 00:04:09.625
with a couple of different files,
words.txt and clown.txt.

77
00:04:10.690 --> 00:04:11.330
Okay.

78
00:04:11.330 --> 00:04:12.150
So I'm going to clear this.

79
00:04:13.900 --> 00:04:15.540
And get out.

80
00:04:15.540 --> 00:04:18.150
And so, I'm going to, I'm going to, I'm
just going to cheat and put

81
00:04:18.150 --> 00:04:20.980
a few of the lines in, we'll, we'll actually
write the whole thing.

82
00:04:22.720 --> 00:04:23.200
Okay.

83
00:04:23.200 --> 00:04:24.860
So we can say goodbye to that now.

84
00:04:27.720 --> 00:04:30.220
So, so I'm going to have to get my data
files.

85
00:04:30.220 --> 00:04:32.919
And I will go to pythonlearn.com.

86
00:04:38.480 --> 00:04:39.250
Go under the book.

87
00:04:43.740 --> 00:04:44.840
Go to samples.

88
00:04:44.840 --> 00:04:46.480
And actually, this is just files, mostly.

89
00:04:46.480 --> 00:04:49.150
Maybe I shouldn't call it code, but I'm
going to grab the

90
00:04:49.150 --> 00:04:53.830
clown file, so this, the clown file is
going to be from the lecture.

91
00:04:53.830 --> 00:04:55.690
The clown ran after the car.

92
00:04:55.690 --> 00:04:56.820
I'm going to save this file.

93
00:04:58.510 --> 00:05:03.390
I'm going to put it in my folder called
dictionaries, and then I'll hit back and

94
00:05:03.390 --> 00:05:10.935
I'll go down to the file called words.txt,
and this is the first three paragraphs

95
00:05:10.935 --> 00:05:16.200
[COUGH] first three paragraphs of the book.

96
00:05:16.200 --> 00:05:18.410
And we're going to count the most common
word there.

97
00:05:18.410 --> 00:05:19.910
And I'll do the File, Save As.

98
00:05:21.910 --> 00:05:25.600
And put words there, right in the
dictionaries folder.

99
00:05:25.600 --> 00:05:29.640
So now I've got my data and I can get rid
of this.

100
00:05:29.640 --> 00:05:32.560
And so if I take a look at my
dictionaries

101
00:05:32.560 --> 00:05:34.340
dictionaries folder.

102
00:05:34.340 --> 00:05:37.090
I see that I've got clown.txt and
word.txt, and

103
00:05:37.090 --> 00:05:40.200
so now I'm going to say, I'll save this.

104
00:05:43.500 --> 00:05:47.930
And I'll call this thing, lots,

105
00:05:49.800 --> 00:05:54.700
lot many words, common word.

106
00:05:55.880 --> 00:05:58.840
I'll call it common.py, what the heck,
keep these things short.

107
00:06:00.315 --> 00:06:04.980
Okay, so if I take a look in here now,
oops, I saved it to the wrong place.

108
00:06:06.070 --> 00:06:09.930
File, come back. File, Save As.

109
00:06:09.930 --> 00:06:10.700
Where did I save it?

110
00:06:10.700 --> 00:06:11.800
I have no idea where I saved it.

111
00:06:11.800 --> 00:06:14.000
But I will save it where it's supposed to be.

112
00:06:15.360 --> 00:06:18.826
It's supposed to be in dictionaries, and
I'm going to call it common.py.

113
00:06:18.826 --> 00:06:21.620
That's why I always check, right?

114
00:06:21.620 --> 00:06:27.200
There it is, common.py, and now I'm
going to go into that, go into my desktop,

115
00:06:28.760 --> 00:06:34.290
dictionaries, and there I've got
common.py and words.txt.

116
00:06:34.290 --> 00:06:35.090
And we'll just run it.

117
00:06:38.350 --> 00:06:38.785
[SOUND]

118
00:06:38.785 --> 00:06:42.620
And, uh, I'll tell it to do clown.txt.

119
00:06:43.620 --> 00:06:45.650
Now it didn't do anything because I
haven't printed anything out.

120
00:06:45.650 --> 00:06:46.560
It actually did read it.

121
00:06:47.700 --> 00:06:52.400
So, so let's take a look here.

122
00:06:54.130 --> 00:06:57.380
I'm going to print len of text.

123
00:06:59.750 --> 00:07:01.220
And I'm going to print the first

124
00:07:03.550 --> 00:07:04.720
oh, 40 characters.

125
00:07:05.730 --> 00:07:07.540
Text up to but not including 40.

126
00:07:07.540 --> 00:07:10.365
So that's what I'm going to do here, just
to see this.

127
00:07:10.365 --> 00:07:11.670
[SOUND]

128
00:07:13.910 --> 00:07:14.840
And I'll do clown again.

129
00:07:17.390 --> 00:07:18.510
So

130
00:07:18.510 --> 00:07:22.250
the length of text is 106 characters.

131
00:07:22.250 --> 00:07:25.210
And, and that is exactly the size of the
file.

132
00:07:25.210 --> 00:07:25.990
It read the whole file.

133
00:07:25.990 --> 00:07:32.440
If I do ls -l it shows clown.txt having
106 characters.

134
00:07:32.440 --> 00:07:38.130
So it read into handle.read, read into the

135
00:07:38.130 --> 00:07:44.120
variable text 106 characters and the
first 40 are just those things.

136
00:07:44.120 --> 00:07:48.015
The clown ran after the car, blah, blah,
blah, blah, blah. Okay?

137
00:07:48.015 --> 00:07:54.570
So now this entire file, clown.txt, has
been split.

138
00:07:54.570 --> 00:07:57.130
So I'm going to print len of words, so

139
00:07:57.130 --> 00:07:59.640
how many words did I get in that split?

140
00:07:59.640 --> 00:08:01.075
And then I'll print the words themselves.

141
00:08:01.075 --> 00:08:07.622
[SOUND]
Oops.

142
00:08:07.622 --> 00:08:12.990
[SOUND]
clown.txt.

143
00:08:12.990 --> 00:08:15.410
So, I ran it, I read in

144
00:08:15.410 --> 00:08:17.970
106 characters, but then I broke it
into words.

145
00:08:17.970 --> 00:08:19.620
And there's 24 words.

146
00:08:19.620 --> 00:08:22.600
And then here is my list of words.

147
00:08:22.600 --> 00:08:23.410
Okay?

148
00:08:23.410 --> 00:08:27.360
So I split the entire file into words at
this point.

149
00:08:27.360 --> 00:08:29.650
And now I have a big list.

150
00:08:29.650 --> 00:08:39.190
Now if I do the same thing with words.py,
I mean words.txt,

151
00:08:39.190 --> 00:08:43.310
it read 1170 characters, and here's
the first characters.

152
00:08:43.310 --> 00:08:46.170
And then it broke it into words, and it
was 210 words.

153
00:08:46.170 --> 00:08:46.680
Now

154
00:08:49.040 --> 00:08:55.550
let me change this ever so slightly so it
prints the first 100 characters.

155
00:08:55.550 --> 00:08:56.425
And I'll show you something.

156
00:08:59.425 --> 00:09:02.570
words.txt

157
00:09:03.570 --> 00:09:07.130
Okay, so it printed the first 100
characters.

158
00:09:08.230 --> 00:09:11.263
Let me split this into two print
statements to make it even clearer.

159
00:09:11.263 --> 00:09:16.413
Let me run it again.

160
00:09:16.413 --> 00:09:20.097
words.py.

161
00:09:20.097 --> 00:09:22.327
Aah!

162
00:09:22.327 --> 00:09:26.420
words.txt.

163
00:09:26.420 --> 00:09:27.260
Clear my screen.

164
00:09:28.530 --> 00:09:33.390
So, the first print, this print right here,

165
00:09:33.390 --> 00:09:36.960
is 1170, and then I print the first 100
characters.

166
00:09:36.960 --> 00:09:39.230
This is that first 100 characters.

167
00:09:39.230 --> 00:09:43.090
What you're sort of not seeing here is
that there is a newline here.

168
00:09:43.090 --> 00:09:44.230
Okay?

169
00:09:44.230 --> 00:09:46.330
And that's why it prints on two lines.

170
00:09:46.330 --> 00:09:47.820
So blah blah blah blah blah newline.

171
00:09:47.820 --> 00:09:49.190
It read newlines and all.

172
00:09:49.190 --> 00:09:52.640
Now it didn't do the second one because
that what where I, my print stopped.

173
00:09:52.640 --> 00:09:57.200
The key thing is, it knows that when split
works, this is

174
00:09:57.200 --> 00:10:01.580
white space, that space is white space,
and the slash n is white space.

175
00:10:01.580 --> 00:10:04.800
So it knows that creative and and are two

176
00:10:04.800 --> 00:10:07.740
separate words and it doesn't somehow put
them together.

177
00:10:07.740 --> 00:10:09.610
So that's the nice thing about the split
with

178
00:10:09.610 --> 00:10:12.850
no parameter doing what it knows to be
white space.

179
00:10:12.850 --> 00:10:15.840
It will use newlines as white space
as well.

180
00:10:15.840 --> 00:10:20.650
And that's quite nice. And if there's extra
spaces it just throws those away.

181
00:10:20.650 --> 00:10:23.970
All the features of sort of split with no
parameter are very intelligent

182
00:10:23.970 --> 00:10:28.340
and very clever and so it works very
nicely in this situation because

183
00:10:28.340 --> 00:10:30.800
newlines are thought of as white
space and blanks are thought

184
00:10:30.800 --> 00:10:34.530
of as white space and it really is exactly
what you would want.

185
00:10:34.530 --> 00:10:36.260
I mean it's exactly what you want.

186
00:10:36.260 --> 00:10:38.860
I mean, that's because humans wrote this
stuff and they thought hmm,

187
00:10:38.860 --> 00:10:42.670
what would I want? So they wrote something
that's what you want.

188
00:10:42.670 --> 00:10:47.810
So now we have, in effect, a whole file, and

189
00:10:47.810 --> 00:10:52.410
a list of all the words in that file, okay?

190
00:10:52.410 --> 00:10:56.500
So I'm going to take all this stuff out.

191
00:10:56.500 --> 00:10:58.440
I'm going to take all this stuff out.

192
00:10:59.480 --> 00:11:01.050
So now words is a list.

193
00:11:02.050 --> 00:11:10.260
And I'm going to say for wrd in words,

194
00:11:10.260 --> 00:11:16.420
I'm using wrd on purpose, print wrd,
right, so that the, a

195
00:11:16.420 --> 00:11:19.495
slightly less mnenomic word so I'll go
back to the

196
00:11:19.495 --> 00:11:24.340
clown.txt and now I'm going to print out
the wrds.

197
00:11:24.340 --> 00:11:28.570
So now my loop is going through the list
one at a time and printing them out.

198
00:11:30.160 --> 00:11:31.410
Okay?

199
00:11:31.410 --> 00:11:34.450
So I am now going to make a dictionary.

200
00:11:36.410 --> 00:11:42.129
I'm going to call this cou equals dict.

201
00:11:42.129 --> 00:11:47.680
[SOUND]
To make an empty dictionary, okay.

202
00:11:47.680 --> 00:11:50.940
So cou is a really unmnemonic version of
counts.

203
00:11:50.940 --> 00:11:54.180
So we'll call them cou, okay?

204
00:11:54.180 --> 00:11:56.160
So cou is our dictionary.

205
00:11:56.160 --> 00:11:58.480
And I'm going to do this the hard way
first.

206
00:11:58.480 --> 00:12:03.405
I'm going to say if wrd, wrd up in cou,

207
00:12:03.405 --> 00:12:09.960
then cou sub wrd

208
00:12:09.960 --> 00:12:15.620
is equal to cow sub wrd plus one.

209
00:12:15.620 --> 00:12:20.420
So if it's already there, we're going to
add one to whatever's stored in the thing

210
00:12:20.420 --> 00:12:25.810
marked with wrd. Now wrd is not w-r-d,
it's the, and on, and down

211
00:12:25.810 --> 00:12:30.820
and whatever. It's, wrd is a variable that
contains these strings, okay?

212
00:12:32.730 --> 00:12:34.600
But if it's not in there, else

213
00:12:36.750 --> 00:12:40.410
cou sub wrd is equal to 1.

214
00:12:40.410 --> 00:12:43.880
So that's like when we've seen the new
person for the first time, we

215
00:12:43.880 --> 00:12:49.710
say, oh, we haven't seen you before, so
we're going to set you to 1. Okay?

216
00:12:49.710 --> 00:12:56.860
And then I'm going to, just for
yucks, I'm going to print wrd, comma,

217
00:12:56.960 --> 00:12:58.330
cou of wrd.

218
00:12:58.330 --> 00:12:59.890
Right?

219
00:13:00.140 --> 00:13:02.450
So I'm going to go as we go through the
loop for each word

220
00:13:02.450 --> 00:13:06.430
we're going to do this add or set to 1.

221
00:13:06.430 --> 00:13:08.800
And then we'll just print it at the end of
the loop.

222
00:13:08.800 --> 00:13:10.880
How many we've got so far.

223
00:13:10.880 --> 00:13:12.635
So let's run this now.

224
00:13:12.635 --> 00:13:15.990
clown.txt.

225
00:13:16.990 --> 00:13:18.000
That didn't work so well

226
00:13:18.000 --> 00:13:21.270
because I didn't save it.

227
00:13:21.270 --> 00:13:23.280
So let's try that again.

228
00:13:23.280 --> 00:13:26.550
clown, let me clear my screen.

229
00:13:26.550 --> 00:13:28.080
I like Macs because I can clear my

230
00:13:28.080 --> 00:13:33.640
screen so nicely, keeps my sort of brain
organized.

231
00:13:33.640 --> 00:13:38.360
Okay, so what we see here is we saw the
word the, and we

232
00:13:38.360 --> 00:13:43.270
put it in the dictionary with 1. clown,
1. ran, 1. after, 1.

233
00:13:43.270 --> 00:13:46.650
Now we've seen the, oh, oh, oh, let's make

234
00:13:46.650 --> 00:13:48.898
another thing to make this even clearer,
hang on.

235
00:13:51.898 --> 00:13:54.843
print Adding,

236
00:13:54.843 --> 00:14:01.280
print New Word.

237
00:14:01.280 --> 00:14:06.040
[SOUND]

238
00:14:06.040 --> 00:14:09.910
Good thing I, well, actually going to call
this Word up.

239
00:14:09.910 --> 00:14:13.570
So when I'm incrementing, I'm going to say
Word up.

240
00:14:13.570 --> 00:14:16.160
And then I'm going to say New Word when
I'm creating it.

241
00:14:16.160 --> 00:14:17.710
So I've just added a print in each of

242
00:14:17.710 --> 00:14:20.400
these just to really clarify what's going
on, right?

243
00:14:20.400 --> 00:14:21.720
Word up.

244
00:14:21.720 --> 00:14:23.440
That means I'm incrementing it.

245
00:14:23.440 --> 00:14:25.575
I'm adding one to it, that's what Word up
means.

246
00:14:26.575 --> 00:14:32.090
clown.txt.

247
00:14:32.090 --> 00:14:33.760
So, here we go.

248
00:14:33.760 --> 00:14:34.650
So, 

249
00:14:37.260 --> 00:14:38.518
Well, let's make this even cooler.

250
00:14:38.518 --> 00:14:46.340
Word up, comma, wrd. And now I can say
comma, wrd.

251
00:14:55.650 --> 00:14:56.940
Okay.

252
00:14:56.940 --> 00:14:58.890
So it saw the.

253
00:14:58.890 --> 00:15:00.060
Did a new word.

254
00:15:00.060 --> 00:15:01.600
Its count is 1.

255
00:15:01.600 --> 00:15:02.500
It saw clown.

256
00:15:07.000 --> 00:15:09.110
And it's new, so it got a 1.

257
00:15:09.110 --> 00:15:10.910
It saw ran, ran's a 1.

258
00:15:10.910 --> 00:15:12.190
After's a 1.

259
00:15:12.190 --> 00:15:14.040
Oh now, the.

260
00:15:14.040 --> 00:15:18.250
The's Word up, so we add 1 to it, so it's
now a 2.

261
00:15:18.250 --> 00:15:19.700
Right?

262
00:15:19.700 --> 00:15:24.940
Car is brand new, and is new, oop, we see
the again, so now the goes to 3.

263
00:15:24.940 --> 00:15:27.560
So you're incrementing when I say
Word up, and

264
00:15:27.560 --> 00:15:29.760
you're setting to 1 when I say New Word.

265
00:15:33.460 --> 00:15:35.520
Yeah, so you get the picture.

266
00:15:35.520 --> 00:15:37.240
So by now we've seen the a bunch of

267
00:15:37.240 --> 00:15:40.390
times, we're adding 1 to the, and it's
now 5.

268
00:15:41.390 --> 00:15:42.980
So at the end of this,

269
00:15:45.560 --> 00:15:47.270
we're going to print c-o-u.

270
00:15:49.510 --> 00:15:52.304
I'm going to do this cooler.

271
00:15:52.304 --> 00:15:58.304
[BLANK AUDIO]

272
00:15:59.304 --> 00:16:01.418
Watch this.

273
00:16:01.418 --> 00:16:03.477
wrd, comma.

274
00:16:04.477 --> 00:16:05.550
Now I'm actually going to

275
00:16:05.550 --> 00:16:06.846
put the count on in here.

276
00:16:07.846 --> 00:16:09.604
c-o-u w-r-d.

277
00:16:10.710 --> 00:16:15.290
And I'll put it after I set the count so
it looks a little prettier.

278
00:16:15.290 --> 00:16:16.870
Check this out, it's going to be awesome.

279
00:16:18.590 --> 00:16:19.210
Word up

280
00:16:23.680 --> 00:16:25.630
and I'm going to change this just say Word

281
00:16:29.490 --> 00:16:33.490
and now I've got the print inside the else

282
00:16:34.490 --> 00:16:37.030
I'm going to say c-o-u sub wrd.

283
00:16:39.020 --> 00:16:42.350
It's okay to make your debug output a
little bit fun.

284
00:16:42.350 --> 00:16:43.830
So now, here we go.

285
00:16:43.830 --> 00:16:46.030
So I put, I move my print into the
if-then-else, and I

286
00:16:46.030 --> 00:16:50.230
print the word whether I'm increasing it
or not, and then how many

287
00:16:50.230 --> 00:16:53.190
it's after. And I do it, I do this after
this line so

288
00:16:53.190 --> 00:16:56.960
it's the the word afterwards. And then I
print the whole dictionary out.

289
00:16:56.960 --> 00:16:58.690
So this is going to be even awesomer.

290
00:17:03.260 --> 00:17:08.260
Okay. the Word, the count is 1.

291
00:17:08.260 --> 00:17:12.380
clown, our first word.

292
00:17:12.380 --> 00:17:13.000
Word, Word, word.

293
00:17:13.000 --> 00:17:16.730
Oop, now here we saw a the, and we
did Word up.

294
00:17:16.730 --> 00:17:18.040
So now it's 2.

295
00:17:18.040 --> 00:17:19.960
car Word is 1.

296
00:17:19.960 --> 00:17:21.520
the Word up, now 3.

297
00:17:21.520 --> 00:17:23.450
You get the picture?

298
00:17:23.450 --> 00:17:27.810
So every time we hit this if part, we do
Word up.

299
00:17:27.810 --> 00:17:30.570
If we hit the else part, we do Word.

300
00:17:30.570 --> 00:17:31.070
Okay?

301
00:17:32.920 --> 00:17:38.010
And at the end we have all the words that
have been upped and added, etc.

302
00:17:38.010 --> 00:17:38.510
Okay?

303
00:17:39.520 --> 00:17:41.390
So enough of this debugging print.

304
00:17:41.850 --> 00:17:43.550
We don't need that.

305
00:17:43.550 --> 00:17:44.800
We don't need that.

306
00:17:44.800 --> 00:17:46.575
It was just fun.

307
00:17:46.575 --> 00:17:49.950
But just let's make sure that it
still works.

308
00:17:52.520 --> 00:17:53.760
It does.

309
00:17:53.760 --> 00:17:59.940
Okay, now, after all that, we are going to
say, you know what?

310
00:17:59.940 --> 00:18:04.090
We don't actually need any of
this crap, because there is an idiom

311
00:18:05.290 --> 00:18:10.440
that basically deals with the fact that
instead of a lookup, okay.

312
00:18:10.440 --> 00:18:12.750
So, here's, so, let's run this one real
quick.

313
00:18:12.750 --> 00:18:15.360
Right? It's like hey, I just want to
add 1 to it.

314
00:18:15.360 --> 00:18:18.575
And we will watch just how fast this
blows up.

315
00:18:18.575 --> 00:18:23.930
[SOUND] And that's because, the, see,
we're doing count wrd,

316
00:18:23.930 --> 00:18:29.270
equals count wrd plus 1, it's this count on
the left side, it's blowing up.

317
00:18:29.270 --> 00:18:29.910
Right?

318
00:18:29.910 --> 00:18:33.480
It's blowing up right here because the
is not yet there.

319
00:18:33.480 --> 00:18:37.110
Well, that is what they made the get
function.

320
00:18:37.110 --> 00:18:40.030
So, it has this cou.get, now that's a method,

321
00:18:40.030 --> 00:18:43.070
so we're going to use parentheses, and we
have to give it a

322
00:18:43.070 --> 00:18:48.410
default value. get says look up wrd,
whatever's in wrd, the, clown, whatever,

323
00:18:48.410 --> 00:18:51.110
and if it's not there give me back a number.

324
00:18:51.110 --> 00:18:53.430
Well we want to set it to 1 the first time.

325
00:18:53.430 --> 00:18:58.540
So if I return the number zero then adding
1 to it will make it be 1 and so I can

326
00:18:58.540 --> 00:19:04.100
capture all of that if-then-else in one
statement now.

327
00:19:04.100 --> 00:19:04.820
clown dot text

328
00:19:07.810 --> 00:19:08.970
Word up. Okay?

329
00:19:08.970 --> 00:19:14.230
So we used the get to do the lookup. It
encapsulates

330
00:19:14.230 --> 00:19:17.360
that if-then-else that we just got done
writing.

331
00:19:17.360 --> 00:19:21.560
It is the if this exists, else give me back
a zero.

332
00:19:21.560 --> 00:19:22.350
OK?

333
00:19:22.350 --> 00:19:22.880
So here we go.

334
00:19:22.880 --> 00:19:25.580
We've got ourselves a nice little happy
guy right?

335
00:19:26.660 --> 00:19:28.770
So now we want to find the biggest one.

336
00:19:28.770 --> 00:19:30.440
Well, we're going to do a maximum loop.

337
00:19:32.050 --> 00:19:33.980
And so let's start by this and saying

338
00:19:37.010 --> 00:19:39.510
lrg equals None.

339
00:19:39.510 --> 00:19:41.990
We're going to use the None pattern.

340
00:19:41.990 --> 00:19:44.030
And so now what I'm going to do is I'm

341
00:19:44.030 --> 00:19:47.700
going to write a for loop that goes
through.

342
00:19:47.700 --> 00:19:49.340
Well let's not, let's get rid of that.

343
00:19:49.340 --> 00:19:50.690
We'll come back to that.

344
00:19:50.690 --> 00:19:56.360
Were going to do k-y-y. Maybe not.

345
00:19:56.360 --> 00:20:01.258
We might do k-e-e, and

346
00:20:01.258 --> 00:20:07.135
val in cou.items.

347
00:20:07.135 --> 00:20:09.630
[NOISE].

348
00:20:09.630 --> 00:20:11.000
Right? So I'm going to go through the
items.

349
00:20:11.000 --> 00:20:12.340
Remember it, okay

350
00:20:12.340 --> 00:20:13.700
let's just do cou dot.

351
00:20:13.700 --> 00:20:15.056
Let's print cou.items here.

352
00:20:15.056 --> 00:20:20.210
Yuck for yuckomatic.

353
00:20:20.210 --> 00:20:21.900
Let me comment this out for a second.

354
00:20:23.130 --> 00:20:24.390
Don't do that.

355
00:20:24.390 --> 00:20:25.040
There we go.

356
00:20:25.040 --> 00:20:28.315
So let's run this one now.

357
00:20:28.315 --> 00:20:30.580
clown.txt.

358
00:20:30.580 --> 00:20:33.440
Okay so now we're printing a list of
tuples.

359
00:20:33.440 --> 00:20:40.950
So each one is a tuple and the way we then
write this for loop

360
00:20:40.950 --> 00:20:45.400
to get this cou items, so this whole thing
here is cou items, it's a list of tuples.

361
00:20:46.400 --> 00:20:52.450
And we can basically make it so that the
kee and the val

362
00:20:52.450 --> 00:20:57.170
move through the list of items where kee
is and val is 3, then next

363
00:20:57.170 --> 00:21:02.390
iteration kee is on val is 1, next
iteration kee is ran val is 2.

364
00:21:02.390 --> 00:21:03.960
Dot, dot, dot, dot, dot, dot, dot.

365
00:21:03.960 --> 00:21:04.970
Okay?

366
00:21:04.970 --> 00:21:05.840
And so that's cool.

367
00:21:05.840 --> 00:21:11.090
I mean it says, this cou items
is a list of

368
00:21:11.090 --> 00:21:15.200
two-tuples, tuples with two items in it,
two things in it.

369
00:21:15.200 --> 00:21:19.480
And we're going to give ourselves two
iteration values.

370
00:21:19.480 --> 00:21:22.570
So just for yuckomatic, we're just
going to first, as we

371
00:21:22.570 --> 00:21:27.630
would, print out kee and val, and then
run that.

372
00:21:32.350 --> 00:21:33.820
So here we go, right.

373
00:21:33.820 --> 00:21:34.410
We've got

374
00:21:36.640 --> 00:21:39.300
kee and val, kee and val,
kee and val, and it's

375
00:21:39.300 --> 00:21:42.720
in whatever order it feels like having
this thing come out in.

376
00:21:42.720 --> 00:21:43.740
Okay?

377
00:21:43.740 --> 00:21:45.920
So, so then what I'm going to do is

378
00:21:45.920 --> 00:21:50.740
I'm going to create a, a variable called
maxval.

379
00:21:51.790 --> 00:21:54.050
I'm going to set it to None.

380
00:21:55.520 --> 00:22:00.643
And I will say, if maxval

381
00:22:00.643 --> 00:22:06.102
is equal to None,

382
00:22:06.102 --> 00:22:10.730
maxval maval

383
00:22:10.730 --> 00:22:12.930
maxval equals val.

384
00:22:12.930 --> 00:22:13.720
Now I'm using this,

385
00:22:13.720 --> 00:22:15.840
I'm using, don't get too crazy.

386
00:22:15.840 --> 00:22:20.110
I am using the contraction form of if
here.

387
00:22:20.110 --> 00:22:22.630
So I'm not indenting, I'm just putting the
one line, because

388
00:22:22.630 --> 00:22:25.760
if maxval is None, maxval is the current
value.

389
00:22:25.760 --> 00:22:32.100
And them I'm going to say, if maxval is
less than val.

390
00:22:32.100 --> 00:22:34.740
And, again, I'm doing this in order.

391
00:22:34.740 --> 00:22:36.780
I'm doing the check for None first.

392
00:22:36.780 --> 00:22:43.710
But once I've got it, maxval equals val,
okay?

393
00:22:43.710 --> 00:22:46.220
So this is in a sense my priming.

394
00:22:46.220 --> 00:22:48.080
We call this sort of a priming thing so

395
00:22:48.080 --> 00:22:50.500
first time through the loop we're going to
grab the first value that we see

396
00:22:50.500 --> 00:22:56.110
and then we're going to print maxval.

397
00:22:56.110 --> 00:22:58.460
We're going to check to see if we're
going up, basically.

398
00:22:58.460 --> 00:23:01.800
If the current maximum is less than what
we're looking at, let's grab it.

399
00:23:01.800 --> 00:23:03.790
And I'll just print out maxval here.

400
00:23:03.790 --> 00:23:06.106
Just for yucks.

401
00:23:06.106 --> 00:23:08.762
Okay?

402
00:23:09.762 --> 00:23:12.900
clown.txt

403
00:23:12.900 --> 00:23:21.060
Okay, so we see and, and the first maxval
is 3, which kind of makes the thing boring.

404
00:23:21.060 --> 00:23:25.640
on is only 1 which is not, so ran is 2, nobody
seems to be better than 3.

405
00:23:25.640 --> 00:23:26.910
down is 1.

406
00:23:26.910 --> 00:23:28.960
fell is 1, the

407
00:23:28.960 --> 00:23:29.960
Ooh, the is 7.

408
00:23:29.960 --> 00:23:31.280
So we grab it.

409
00:23:31.280 --> 00:23:33.790
tent is 2, so then we're all done.

410
00:23:33.790 --> 00:23:34.290
Okay?

411
00:23:35.330 --> 00:23:37.210
So then I'll just print out at the end

412
00:23:37.210 --> 00:23:39.445
print out maxval.

413
00:23:41.445 --> 00:23:45.639
So if I do this, and type clown.txt

414
00:23:45.639 --> 00:23:50.390
Pow. We know that the, the best
number is 7.

415
00:23:50.390 --> 00:23:54.720
But now what we want is we want to know
what word it was.

416
00:23:54.720 --> 00:23:55.950
What is our best word?

417
00:23:57.020 --> 00:24:02.100
Well, so, I'm just going to make another
variable called max

418
00:24:03.110 --> 00:24:07.280
wrd and I'm going to make it None at the
beginning of the loop and I'm going to add

419
00:24:07.280 --> 00:24:11.830
make this, make that be an indent. And
at this moment where I'm

420
00:24:11.830 --> 00:24:15.800
capturing the maximum value, I'm just going
to capture the maximum word as well.

421
00:24:15.800 --> 00:24:18.330
maxwrd

422
00:24:22.570 --> 00:24:23.980
equals kee.

423
00:24:23.980 --> 00:24:24.520
Oh, wait a sec.

424
00:24:24.520 --> 00:24:26.560
I want to call this maxkee.

425
00:24:26.560 --> 00:24:33.610
So we're going to have a really stupid,
funny maxkee.

426
00:24:33.610 --> 00:24:39.450
So we've got kee, which is the key, and
then maxkee.

427
00:24:39.790 --> 00:24:42.460
And I'm going to print out maxval and
maxkee

428
00:24:42.460 --> 00:24:44.920
as well, and then I'm going to print out

429
00:24:48.090 --> 00:24:50.300
maxkee, comma, maxval.

430
00:24:50.300 --> 00:24:51.670
I'll put maxkee over here.

431
00:24:53.750 --> 00:24:54.570
And you'll see

432
00:24:55.980 --> 00:24:57.480
maxval

433
00:25:04.860 --> 00:25:07.070
Oh, that's not going to quite work.

434
00:25:07.070 --> 00:25:09.200
It's not going to quite work.

435
00:25:09.200 --> 00:25:12.340
But let's let it not work, and then

436
00:25:14.620 --> 00:25:16.050
we'll see what we did wrong.

437
00:25:17.950 --> 00:25:21.235
It'll ultimately work, but it'll kind of
be flawed.

438
00:25:21.235 --> 00:25:24.640
clown.txt

439
00:25:24.640 --> 00:25:25.400
Okay, so.

440
00:25:25.400 --> 00:25:28.665
Let me get rid of this count items line.

441
00:25:28.665 --> 00:25:31.830
[SOUND] Get rid of that, make it clear.

442
00:25:38.120 --> 00:25:40.050
Okay, so here we go.

443
00:25:40.050 --> 00:25:44.100
We've got, umm

444
00:25:47.100 --> 00:25:51.280
First time through, the word we're looking
at is and, and the

445
00:25:53.680 --> 00:25:55.340
value for and is 3.

446
00:25:55.340 --> 00:25:57.220
And maxkee is None.

447
00:25:59.550 --> 00:26:02.690
That's the maximum key we've seen, but we
do have a maximum value, which means

448
00:26:02.690 --> 00:26:05.700
we've seen the largest is 3. Now why is that?
Wait a sec.

449
00:26:05.700 --> 00:26:10.330
If the 3 is the largest and we just saw 3,
shouldn't this be and instead of None?

450
00:26:12.060 --> 00:26:16.400
And the problem is, when we came through
here and we hit this maxval None,

451
00:26:16.400 --> 00:26:19.250
we set maxval equal to val.

452
00:26:20.680 --> 00:26:22.610
And then we checked if maxval was less
than value

453
00:26:22.610 --> 00:26:25.880
to capture the key, so we weren't
capturing the key.

454
00:26:25.880 --> 00:26:30.290
So a quick hack on this, and what the
heck, we're not above quick hacks.

455
00:26:30.290 --> 00:26:33.570
So if I change this to less than or equal
to, then when I set

456
00:26:33.570 --> 00:26:37.830
maxval to val, it'll at least run this bit
of code, and then capture the key.

457
00:26:37.830 --> 00:26:39.200
So, that's a quick way to do it.

458
00:26:39.200 --> 00:26:40.430
Close enough for government work.

459
00:26:46.510 --> 00:26:52.330
So now we've fixed the bug, right, the bug
is that we were capturing the max number,

460
00:26:52.330 --> 00:26:57.840
but we weren't capturing the max key, but
now we are also capturing the max key.

461
00:26:57.840 --> 00:27:02.950
Now, in general a more, slightly more
elegant way to do this is

462
00:27:02.950 --> 00:27:07.270
actually to just make this a, a guardian
pattern with an or clause.

463
00:27:07.270 --> 00:27:13.880
If maxval is equal to None, or,

464
00:27:13.880 --> 00:27:21.200
and I'll put this back to a less than,
maxval is less than val, then capture them.

465
00:27:21.200 --> 00:27:24.640
Right? So if we're in the, oop, get rid of
the equal sign.

466
00:27:24.640 --> 00:27:25.300
All right.

467
00:27:25.300 --> 00:27:30.560
If maxval is equal to None, or maxval is
less than value, capture them, grab them.

468
00:27:30.560 --> 00:27:33.150
Now, the output's going to be the same,
but it will be pretty.

469
00:27:33.150 --> 00:27:34.280
It's more elegant code.

470
00:27:35.460 --> 00:27:37.250
Partly because we did it all on one if,

471
00:27:37.250 --> 00:27:39.760
and partly because we just don't have to
look

472
00:27:39.760 --> 00:27:41.600
at our code to decide, oh, when that first

473
00:27:41.600 --> 00:27:43.702
thing runs, we gotta get the second thing,
right?

474
00:27:47.702 --> 00:27:51.108
And so now at the end we see the and 7,

475
00:27:51.100 --> 00:27:55.810
and we are as good to go as you can be, and

476
00:27:55.810 --> 00:27:58.450
all we have to do before we turn in our
assignment

477
00:27:58.450 --> 00:28:01.890
is comment out that little bit of debug
and away we go.

478
00:28:01.890 --> 00:28:06.890
clown.txt. the 7.

479
00:28:06.890 --> 00:28:09.600
And what's my other file, words.txt?

480
00:28:09.600 --> 00:28:11.705
We just try to run it on a bigger file now.

481
00:28:11.705 --> 00:28:14.324
Words.txt it's all the same.

482
00:28:14.324 --> 00:28:17.770
And it shows us to 16.

483
00:28:17.770 --> 00:28:19.050
So

484
00:28:21.170 --> 00:28:23.540
here's our happy little program at the
end.

485
00:28:23.540 --> 00:28:24.360
Let's take a look at this.

486
00:28:26.630 --> 00:28:29.070
We read the file.

487
00:28:29.070 --> 00:28:30.850
Oh, we open the file.

488
00:28:30.850 --> 00:28:35.260
We read the entire file line after line,
all the lines including newlines.

489
00:28:35.260 --> 00:28:36.610
We split it into words.

490
00:28:36.610 --> 00:28:40.940
Conveniently, the newline counts as a
space. That's because it's white space.

491
00:28:40.940 --> 00:28:45.740
Then we make a simple dictionary counting
loop to loop through the words we just split.

492
00:28:45.740 --> 00:28:48.440
And then we have a real simple maximum
loop where

493
00:28:48.440 --> 00:28:51.520
we capture both the maximum value and the
maximum key.

494
00:28:51.520 --> 00:28:54.500
And then we simply print the maximum key
out.

495
00:28:56.360 --> 00:28:57.490
At the very end.

496
00:28:57.490 --> 00:28:58.070
Okay?

497
00:28:58.070 --> 00:29:00.650
So I hope you found this useful.

498
00:29:00.650 --> 00:29:03.170
And see you in the next exercise.
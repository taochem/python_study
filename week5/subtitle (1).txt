Hello and welcome back to our continuing
episodes of worked exercises for the book Python for Informatics
Exploring Information. I'm your author and tour guide
Dr. Charles Severance. As always, these materials are copyright
Creative Commons Attribution. I look forward to ways that you can improve
on this work. This material is a supplement to my www.pythonlearn.com which is my
supporting website. For python learn, Python for Informatics. It has installation and other kinds of
support that can help you get started. So for this particular exercise, it really
comes from our dictionaries example. And we're going to try to figure out the
most common word. And in this one we're going to deal with
some really simple text files where the words are just words, and we're not
going to worry about lines or skipping lines, or anything. So we're just going to do words and, and
so, we'll do this thing. So, if we look at this program, there's really four basic
parts to the program. One is, the first part is actually
reading the program and this is a little different pattern than
other things that we've done. And that's be, we're going to read the
whole file. So this is, instead of doing a for loop here, we are going to read the entire
file. So, we're going to ask the user for the
file name. And then open the file name that they type
in. So, you know, here's the, we're asking the
user for a file name. Open the file, but then we're going to do
a handle.read. Now, if you recall, handle.read,
normally we would write a for loop that would loop through each line and
strip, and split and, and whatever. What we're going to do here is say, you
know, read this whole thing. We know that these files are pretty small. Read the whole thing in into a string. Now, the key thing is that will read all
the lines in, and the newlines at the end of the, at the line,
there's a newline. But all this will be read in. All the lines and the newlines. And the nice thing about this is the
newlines form white space, and so they will give a word break before the let, between the last
word on one line and the first word on the next line. I'll talk about that a bit more when we're
actually looking at some stuff. We're going to split it into words, which
means we're going to make a very long list, which is all the words
in the entire file. Not just the words on a line, which is some of the other examples that we've
used. But again, we know these files that we're
playing with are relatively small, and they fit in the
memory of Python, and so we're just going to do simple, crude, you
know, read the whole thing in as a string, split it on white space,
newlines included. And now we're going to write a very simple
dictionary loop. That, we're going to create a dictionary,
and we're going to go through the word. Now, this, this word is our iteration
variable, of course. And words is all the words in all the
lines of the text. We're going to use the get pattern. So if the word exists, whatever word we're
looking at, we will get it and add one to it. And if it doesn't, we'll just use the
default value and add one. So this is effectively the same as setting
it to 1 the first time we see a word. Then we're going to write a simple
maximum list. And so what we're going to do we're going
to create a bigword variable that we're going to start as None, which is the word that is the largest and how many there are. And then we're going to do a loop with two iteration variables. We're
going to go through our, you know, our dictionary will be
word, comma, count, you know the word will map to the count. The word will be the key, count will be the
value. So we use counts.items to get that list of
tuples back. And basically if we're on the first one,
bigcount being None, or if the count is greater than bigcount, then we're going going to remember the word and we're
going to remember the count. And then this loop will go through all
the words. And at the end, we just print out
bigword and bigcount. So that basically is the the outline of what we're going to do. And when we'll run it, we'll run it with a couple of different files,
words.txt and clown.txt. Okay. So I'm going to clear this. And get out. And so, I'm going to, I'm going to, I'm
just going to cheat and put a few of the lines in, we'll, we'll actually
write the whole thing. Okay. So we can say goodbye to that now. So, so I'm going to have to get my data
files. And I will go to pythonlearn.com. Go under the book. Go to samples. And actually, this is just files, mostly. Maybe I shouldn't call it code, but I'm
going to grab the clown file, so this, the clown file is
going to be from the lecture. The clown ran after the car. I'm going to save this file. I'm going to put it in my folder called
dictionaries, and then I'll hit back and I'll go down to the file called words.txt,
and this is the first three paragraphs [COUGH] first three paragraphs of the book. And we're going to count the most common
word there. And I'll do the File, Save As. And put words there, right in the
dictionaries folder. So now I've got my data and I can get rid
of this. And so if I take a look at my
dictionaries dictionaries folder. I see that I've got clown.txt and
word.txt, and so now I'm going to say, I'll save this. And I'll call this thing, lots, lot many words, common word. I'll call it common.py, what the heck,
keep these things short. Okay, so if I take a look in here now,
oops, I saved it to the wrong place. File, come back. File, Save As. Where did I save it? I have no idea where I saved it. But I will save it where it's supposed to be. It's supposed to be in dictionaries, and
I'm going to call it common.py. That's why I always check, right? There it is, common.py, and now I'm
going to go into that, go into my desktop, dictionaries, and there I've got
common.py and words.txt. And we'll just run it. [SOUND] And, uh, I'll tell it to do clown.txt. Now it didn't do anything because I
haven't printed anything out. It actually did read it. So, so let's take a look here. I'm going to print len of text. And I'm going to print the first oh, 40 characters. Text up to but not including 40. So that's what I'm going to do here, just
to see this. [SOUND] And I'll do clown again. So the length of text is 106 characters. And, and that is exactly the size of the
file. It read the whole file. If I do ls -l it shows clown.txt having
106 characters. So it read into handle.read, read into the variable text 106 characters and the
first 40 are just those things. The clown ran after the car, blah, blah,
blah, blah, blah. Okay? So now this entire file, clown.txt, has
been split. So I'm going to print len of words, so how many words did I get in that split? And then I'll print the words themselves. [SOUND]
Oops. [SOUND]
clown.txt. So, I ran it, I read in 106 characters, but then I broke it
into words. And there's 24 words. And then here is my list of words. Okay? So I split the entire file into words at
this point. And now I have a big list. Now if I do the same thing with words.py,
I mean words.txt, it read 1170 characters, and here's
the first characters. And then it broke it into words, and it
was 210 words. Now let me change this ever so slightly so it
prints the first 100 characters. And I'll show you something. words.txt Okay, so it printed the first 100
characters. Let me split this into two print
statements to make it even clearer. Let me run it again. words.py. Aah! words.txt. Clear my screen. So, the first print, this print right here, is 1170, and then I print the first 100
characters. This is that first 100 characters. What you're sort of not seeing here is
that there is a newline here. Okay? And that's why it prints on two lines. So blah blah blah blah blah newline. It read newlines and all. Now it didn't do the second one because
that what where I, my print stopped. The key thing is, it knows that when split
works, this is white space, that space is white space,
and the slash n is white space. So it knows that creative and and are two separate words and it doesn't somehow put
them together. So that's the nice thing about the split
with no parameter doing what it knows to be
white space. It will use newlines as white space
as well. And that's quite nice. And if there's extra
spaces it just throws those away. All the features of sort of split with no
parameter are very intelligent and very clever and so it works very
nicely in this situation because newlines are thought of as white
space and blanks are thought of as white space and it really is exactly
what you would want. I mean it's exactly what you want. I mean, that's because humans wrote this
stuff and they thought hmm, what would I want? So they wrote something
that's what you want. So now we have, in effect, a whole file, and a list of all the words in that file, okay? So I'm going to take all this stuff out. I'm going to take all this stuff out. So now words is a list. And I'm going to say for wrd in words, I'm using wrd on purpose, print wrd,
right, so that the, a slightly less mnenomic word so I'll go
back to the clown.txt and now I'm going to print out
the wrds. So now my loop is going through the list
one at a time and printing them out. Okay? So I am now going to make a dictionary. I'm going to call this cou equals dict. [SOUND]
To make an empty dictionary, okay. So cou is a really unmnemonic version of
counts. So we'll call them cou, okay? So cou is our dictionary. And I'm going to do this the hard way
first. I'm going to say if wrd, wrd up in cou, then cou sub wrd is equal to cow sub wrd plus one. So if it's already there, we're going to
add one to whatever's stored in the thing marked with wrd. Now wrd is not w-r-d,
it's the, and on, and down and whatever. It's, wrd is a variable that
contains these strings, okay? But if it's not in there, else cou sub wrd is equal to 1. So that's like when we've seen the new
person for the first time, we say, oh, we haven't seen you before, so
we're going to set you to 1. Okay? And then I'm going to, just for
yucks, I'm going to print wrd, comma, cou of wrd. Right? So I'm going to go as we go through the
loop for each word we're going to do this add or set to 1. And then we'll just print it at the end of
the loop. How many we've got so far. So let's run this now. clown.txt. That didn't work so well because I didn't save it. So let's try that again. clown, let me clear my screen. I like Macs because I can clear my screen so nicely, keeps my sort of brain
organized. Okay, so what we see here is we saw the
word the, and we put it in the dictionary with 1. clown,
1. ran, 1. after, 1. Now we've seen the, oh, oh, oh, let's make another thing to make this even clearer,
hang on. print Adding, print New Word. [SOUND] Good thing I, well, actually going to call
this Word up. So when I'm incrementing, I'm going to say
Word up. And then I'm going to say New Word when
I'm creating it. So I've just added a print in each of these just to really clarify what's going
on, right? Word up. That means I'm incrementing it. I'm adding one to it, that's what Word up
means. clown.txt. So, here we go. So, Well, let's make this even cooler. Word up, comma, wrd. And now I can say
comma, wrd. Okay. So it saw the. Did a new word. Its count is 1. It saw clown. And it's new, so it got a 1. It saw ran, ran's a 1. After's a 1. Oh now, the. The's Word up, so we add 1 to it, so it's
now a 2. Right? Car is brand new, and is new, oop, we see
the again, so now the goes to 3. So you're incrementing when I say
Word up, and you're setting to 1 when I say New Word. Yeah, so you get the picture. So by now we've seen the a bunch of times, we're adding 1 to the, and it's
now 5. So at the end of this, we're going to print c-o-u. I'm going to do this cooler. [BLANK AUDIO] Watch this. wrd, comma. Now I'm actually going to put the count on in here. c-o-u w-r-d. And I'll put it after I set the count so
it looks a little prettier. Check this out, it's going to be awesome. Word up and I'm going to change this just say Word and now I've got the print inside the else I'm going to say c-o-u sub wrd. It's okay to make your debug output a
little bit fun. So now, here we go. So I put, I move my print into the
if-then-else, and I print the word whether I'm increasing it
or not, and then how many it's after. And I do it, I do this after
this line so it's the the word afterwards. And then I
print the whole dictionary out. So this is going to be even awesomer. Okay. the Word, the count is 1. clown, our first word. Word, Word, word. Oop, now here we saw a the, and we
did Word up. So now it's 2. car Word is 1. the Word up, now 3. You get the picture? So every time we hit this if part, we do
Word up. If we hit the else part, we do Word. Okay? And at the end we have all the words that
have been upped and added, etc. Okay? So enough of this debugging print. We don't need that. We don't need that. It was just fun. But just let's make sure that it
still works. It does. Okay, now, after all that, we are going to
say, you know what? We don't actually need any of
this crap, because there is an idiom that basically deals with the fact that
instead of a lookup, okay. So, here's, so, let's run this one real
quick. Right? It's like hey, I just want to
add 1 to it. And we will watch just how fast this
blows up. [SOUND] And that's because, the, see,
we're doing count wrd, equals count wrd plus 1, it's this count on
the left side, it's blowing up. Right? It's blowing up right here because the
is not yet there. Well, that is what they made the get
function. So, it has this cou.get, now that's a method, so we're going to use parentheses, and we
have to give it a default value. get says look up wrd,
whatever's in wrd, the, clown, whatever, and if it's not there give me back a number. Well we want to set it to 1 the first time. So if I return the number zero then adding
1 to it will make it be 1 and so I can capture all of that if-then-else in one
statement now. clown dot text Word up. Okay? So we used the get to do the lookup. It
encapsulates that if-then-else that we just got done
writing. It is the if this exists, else give me back
a zero. OK? So here we go. We've got ourselves a nice little happy
guy right? So now we want to find the biggest one. Well, we're going to do a maximum loop. And so let's start by this and saying lrg equals None. We're going to use the None pattern. And so now what I'm going to do is I'm going to write a for loop that goes
through. Well let's not, let's get rid of that. We'll come back to that. Were going to do k-y-y. Maybe not. We might do k-e-e, and val in cou.items. [NOISE]. Right? So I'm going to go through the
items. Remember it, okay let's just do cou dot. Let's print cou.items here. Yuck for yuckomatic. Let me comment this out for a second. Don't do that. There we go. So let's run this one now. clown.txt. Okay so now we're printing a list of
tuples. So each one is a tuple and the way we then
write this for loop to get this cou items, so this whole thing
here is cou items, it's a list of tuples. And we can basically make it so that the
kee and the val move through the list of items where kee
is and val is 3, then next iteration kee is on val is 1, next
iteration kee is ran val is 2. Dot, dot, dot, dot, dot, dot, dot. Okay? And so that's cool. I mean it says, this cou items
is a list of two-tuples, tuples with two items in it,
two things in it. And we're going to give ourselves two
iteration values. So just for yuckomatic, we're just
going to first, as we would, print out kee and val, and then
run that. So here we go, right. We've got kee and val, kee and val,
kee and val, and it's in whatever order it feels like having
this thing come out in. Okay? So, so then what I'm going to do is I'm going to create a, a variable called
maxval. I'm going to set it to None. And I will say, if maxval is equal to None, maxval maval maxval equals val. Now I'm using this, I'm using, don't get too crazy. I am using the contraction form of if
here. So I'm not indenting, I'm just putting the
one line, because if maxval is None, maxval is the current
value. And them I'm going to say, if maxval is
less than val. And, again, I'm doing this in order. I'm doing the check for None first. But once I've got it, maxval equals val,
okay? So this is in a sense my priming. We call this sort of a priming thing so first time through the loop we're going to
grab the first value that we see and then we're going to print maxval. We're going to check to see if we're
going up, basically. If the current maximum is less than what
we're looking at, let's grab it. And I'll just print out maxval here. Just for yucks. Okay? clown.txt Okay, so we see and, and the first maxval
is 3, which kind of makes the thing boring. on is only 1 which is not, so ran is 2, nobody
seems to be better than 3. down is 1. fell is 1, the Ooh, the is 7. So we grab it. tent is 2, so then we're all done. Okay? So then I'll just print out at the end print out maxval. So if I do this, and type clown.txt Pow. We know that the, the best
number is 7. But now what we want is we want to know
what word it was. What is our best word? Well, so, I'm just going to make another
variable called max wrd and I'm going to make it None at the
beginning of the loop and I'm going to add make this, make that be an indent. And
at this moment where I'm capturing the maximum value, I'm just going
to capture the maximum word as well. maxwrd equals kee. Oh, wait a sec. I want to call this maxkee. So we're going to have a really stupid,
funny maxkee. So we've got kee, which is the key, and
then maxkee. And I'm going to print out maxval and
maxkee as well, and then I'm going to print out maxkee, comma, maxval. I'll put maxkee over here. And you'll see maxval Oh, that's not going to quite work. It's not going to quite work. But let's let it not work, and then we'll see what we did wrong. It'll ultimately work, but it'll kind of
be flawed. clown.txt Okay, so. Let me get rid of this count items line. [SOUND] Get rid of that, make it clear. Okay, so here we go. We've got, umm First time through, the word we're looking
at is and, and the value for and is 3. And maxkee is None. That's the maximum key we've seen, but we
do have a maximum value, which means we've seen the largest is 3. Now why is that?
Wait a sec. If the 3 is the largest and we just saw 3,
shouldn't this be and instead of None? And the problem is, when we came through
here and we hit this maxval None, we set maxval equal to val. And then we checked if maxval was less
than value to capture the key, so we weren't
capturing the key. So a quick hack on this, and what the
heck, we're not above quick hacks. So if I change this to less than or equal
to, then when I set maxval to val, it'll at least run this bit
of code, and then capture the key. So, that's a quick way to do it. Close enough for government work. So now we've fixed the bug, right, the bug
is that we were capturing the max number, but we weren't capturing the max key, but
now we are also capturing the max key. Now, in general a more, slightly more
elegant way to do this is actually to just make this a, a guardian
pattern with an or clause. If maxval is equal to None, or, and I'll put this back to a less than,
maxval is less than val, then capture them. Right? So if we're in the, oop, get rid of
the equal sign. All right. If maxval is equal to None, or maxval is
less than value, capture them, grab them. Now, the output's going to be the same,
but it will be pretty. It's more elegant code. Partly because we did it all on one if, and partly because we just don't have to
look at our code to decide, oh, when that first thing runs, we gotta get the second thing,
right? And so now at the end we see the and 7, and we are as good to go as you can be, and all we have to do before we turn in our
assignment is comment out that little bit of debug
and away we go. clown.txt. the 7. And what's my other file, words.txt? We just try to run it on a bigger file now. Words.txt it's all the same. And it shows us to 16. So here's our happy little program at the
end. Let's take a look at this. We read the file. Oh, we open the file. We read the entire file line after line,
all the lines including newlines. We split it into words. Conveniently, the newline counts as a
space. That's because it's white space. Then we make a simple dictionary counting
loop to loop through the words we just split. And then we have a real simple maximum
loop where we capture both the maximum value and the
maximum key. And then we simply print the maximum key
out. At the very end. Okay? So I hope you found this useful. And see you in the next exercise.